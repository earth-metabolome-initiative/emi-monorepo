use std::fmt::Display;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub(crate) enum NodeShape {
    Rectangle,
    RoundEdges,
    StadiumShape,
    Subprocess,
    Cylinder,
    Circle,
    Odd,
    Diamond,
    Hexagon,
    /// Lean right parallelogram
    LRParallelogram,
    /// Lean left parallelogram
    LLParallelogram,
    /// Base bottom trapezoid
    Trapezoid,
    /// Base top trapezoid
    ReverseTrapezoid,
    DoubleCircle,
    NotchedRectangle,
    Linedrectangle,
    SmallCircle,
    FramedCircle,
    LongRectangle,
    Hourglass,
    LeftCurlyBrace,
    RightCurlyBrace,
    CurlyBraces,
    LightningBolt,
    Document,
    HalfRoundedRectangle,
    HorizontalCylinder,
    LinedCylinder,
    CurvedTrapezoid,
    DividedRectangle,
    SmallTriangle,
    WindowPane,
    FilledCircle,
    LinedDocument,
    NotchedPentagon,
    FlippedTriangle,
    SlopedRectangle,
    StackedDocument,
    StackedRectangle,
    Flag,
    BowTieRectangle,
    CrossedCircle,
    TaggedDocument,
    TaggedRectangle,
}

impl Display for NodeShape {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Rectangle => write!(f, "rect"),
            Self::RoundEdges => write!(f, "rounded"),
            Self::StadiumShape => write!(f, "stadium"),
            Self::Subprocess => write!(f, "subproc"),
            Self::Cylinder => write!(f, "cyl"),
            Self::Circle => write!(f, "circle"),
            Self::Odd => write!(f, "odd"),
            Self::Diamond => write!(f, "diamond"),
            Self::Hexagon => write!(f, "hex"),
            Self::LRParallelogram => write!(f, "lean-r"),
            Self::LLParallelogram => write!(f, "lean-l"),
            Self::Trapezoid => write!(f, "trap-b"),
            Self::ReverseTrapezoid => write!(f, "trap-t"),
            Self::DoubleCircle => write!(f, "dbl-circ"),
            Self::NotchedRectangle => write!(f, "notch-rect"),
            Self::Linedrectangle => write!(f, "lin-rect"),
            Self::SmallCircle => write!(f, "sm-circ"),
            Self::FramedCircle => write!(f, "framed-circle"),
            Self::LongRectangle => write!(f, "fork"),
            Self::Hourglass => write!(f, "hourglass"),
            Self::LeftCurlyBrace => write!(f, "comment"),
            Self::RightCurlyBrace => write!(f, "brace-r"),
            Self::CurlyBraces => write!(f, "braces"),
            Self::LightningBolt => write!(f, "bolt"),
            Self::Document => write!(f, "doc"),
            Self::HalfRoundedRectangle => write!(f, "delay"),
            Self::HorizontalCylinder => write!(f, "das"),
            Self::LinedCylinder => write!(f, "lin-cyl"),
            Self::CurvedTrapezoid => write!(f, "curv-trap"),
            Self::DividedRectangle => write!(f, "div-rect"),
            Self::SmallTriangle => write!(f, "tri"),
            Self::WindowPane => write!(f, "win-pane"),
            Self::FilledCircle => write!(f, "f-circ"),
            Self::LinedDocument => write!(f, "lin-doc"),
            Self::NotchedPentagon => write!(f, "notch-pent"),
            Self::FlippedTriangle => write!(f, "flip-tri"),
            Self::SlopedRectangle => write!(f, "sl-rect"),
            Self::StackedDocument => write!(f, "docs"),
            Self::StackedRectangle => write!(f, "processes"),
            Self::Flag => write!(f, "flag"),
            Self::BowTieRectangle => write!(f, "bow-rect"),
            Self::CrossedCircle => write!(f, "cross-circ"),
            Self::TaggedDocument => write!(f, "tag-doc"),
            Self::TaggedRectangle => write!(f, "tag-rect"),
        }
    }
}
