#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum ThuliumIsotope {
    Tm144,
    Tm145,
    Tm146,
    Tm147,
    Tm148,
    Tm149,
    Tm150,
    Tm151,
    Tm152,
    Tm153,
    Tm154,
    Tm155,
    Tm156,
    Tm157,
    Tm158,
    Tm159,
    Tm160,
    Tm161,
    Tm162,
    Tm163,
    Tm164,
    Tm165,
    Tm166,
    Tm167,
    Tm168,
    Tm169,
    Tm170,
    Tm171,
    Tm172,
    Tm173,
    Tm174,
    Tm175,
    Tm176,
    Tm177,
    Tm178,
    Tm179,
}
impl super::RelativeAtomicMass for ThuliumIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Tm144 => 143.97628f64,
            Self::Tm145 => 144.97039f64,
            Self::Tm146 => 145.96684f64,
            Self::Tm147 => 146.9613799f64,
            Self::Tm148 => 147.958384f64,
            Self::Tm149 => 148.95289f64,
            Self::Tm150 => 149.95009f64,
            Self::Tm151 => 150.945488f64,
            Self::Tm152 => 151.944422f64,
            Self::Tm153 => 152.94204f64,
            Self::Tm154 => 153.94157f64,
            Self::Tm155 => 154.93921f64,
            Self::Tm156 => 155.938992f64,
            Self::Tm157 => 156.936944f64,
            Self::Tm158 => 157.93698f64,
            Self::Tm159 => 158.934975f64,
            Self::Tm160 => 159.935263f64,
            Self::Tm161 => 160.933549f64,
            Self::Tm162 => 161.934002f64,
            Self::Tm163 => 162.9326592f64,
            Self::Tm164 => 163.933544f64,
            Self::Tm165 => 164.9324431f64,
            Self::Tm166 => 165.933561f64,
            Self::Tm167 => 166.9328562f64,
            Self::Tm168 => 167.9341774f64,
            Self::Tm169 => 168.9342179f64,
            Self::Tm170 => 169.935806f64,
            Self::Tm171 => 170.9364339f64,
            Self::Tm172 => 171.9384055f64,
            Self::Tm173 => 172.9396084f64,
            Self::Tm174 => 173.942173f64,
            Self::Tm175 => 174.943841f64,
            Self::Tm176 => 175.947f64,
            Self::Tm177 => 176.94904f64,
            Self::Tm178 => 177.95264f64,
            Self::Tm179 => 178.95534f64,
        }
    }
}
impl super::ElementVariant for ThuliumIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Tm
    }
}
impl super::MassNumber for ThuliumIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Tm144 => 144u16,
            Self::Tm145 => 145u16,
            Self::Tm146 => 146u16,
            Self::Tm147 => 147u16,
            Self::Tm148 => 148u16,
            Self::Tm149 => 149u16,
            Self::Tm150 => 150u16,
            Self::Tm151 => 151u16,
            Self::Tm152 => 152u16,
            Self::Tm153 => 153u16,
            Self::Tm154 => 154u16,
            Self::Tm155 => 155u16,
            Self::Tm156 => 156u16,
            Self::Tm157 => 157u16,
            Self::Tm158 => 158u16,
            Self::Tm159 => 159u16,
            Self::Tm160 => 160u16,
            Self::Tm161 => 161u16,
            Self::Tm162 => 162u16,
            Self::Tm163 => 163u16,
            Self::Tm164 => 164u16,
            Self::Tm165 => 165u16,
            Self::Tm166 => 166u16,
            Self::Tm167 => 167u16,
            Self::Tm168 => 168u16,
            Self::Tm169 => 169u16,
            Self::Tm170 => 170u16,
            Self::Tm171 => 171u16,
            Self::Tm172 => 172u16,
            Self::Tm173 => 173u16,
            Self::Tm174 => 174u16,
            Self::Tm175 => 175u16,
            Self::Tm176 => 176u16,
            Self::Tm177 => 177u16,
            Self::Tm178 => 178u16,
            Self::Tm179 => 179u16,
        }
    }
}
impl super::IsotopicComposition for ThuliumIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Tm144 => None,
            Self::Tm145 => None,
            Self::Tm146 => None,
            Self::Tm147 => None,
            Self::Tm148 => None,
            Self::Tm149 => None,
            Self::Tm150 => None,
            Self::Tm151 => None,
            Self::Tm152 => None,
            Self::Tm153 => None,
            Self::Tm154 => None,
            Self::Tm155 => None,
            Self::Tm156 => None,
            Self::Tm157 => None,
            Self::Tm158 => None,
            Self::Tm159 => None,
            Self::Tm160 => None,
            Self::Tm161 => None,
            Self::Tm162 => None,
            Self::Tm163 => None,
            Self::Tm164 => None,
            Self::Tm165 => None,
            Self::Tm166 => None,
            Self::Tm167 => None,
            Self::Tm168 => None,
            Self::Tm169 => Some(1f64),
            Self::Tm170 => None,
            Self::Tm171 => None,
            Self::Tm172 => None,
            Self::Tm173 => None,
            Self::Tm174 => None,
            Self::Tm175 => None,
            Self::Tm176 => None,
            Self::Tm177 => None,
            Self::Tm178 => None,
            Self::Tm179 => None,
        }
    }
}
impl super::MostCommonIsotope for ThuliumIsotope {
    fn most_common_isotope() -> Self {
        Self::Tm169
    }
}
