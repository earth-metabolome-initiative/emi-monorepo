#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum IodineIsotope {
    I107,
    I108,
    I109,
    I110,
    I111,
    I112,
    I113,
    I114,
    I115,
    I116,
    I117,
    I118,
    I119,
    I120,
    I121,
    I122,
    I123,
    I124,
    I125,
    I126,
    I127,
    I128,
    I129,
    I130,
    I131,
    I132,
    I133,
    I134,
    I135,
    I136,
    I137,
    I138,
    I139,
    I140,
    I141,
    I142,
    I143,
    I144,
    I145,
}
impl super::RelativeAtomicMass for IodineIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::I107 => 106.94678f64,
            Self::I108 => 107.94348f64,
            Self::I109 => 108.9380853f64,
            Self::I110 => 109.935089f64,
            Self::I111 => 110.9302692f64,
            Self::I112 => 111.928005f64,
            Self::I113 => 112.9236501f64,
            Self::I114 => 113.92185f64,
            Self::I115 => 114.918048f64,
            Self::I116 => 115.91681f64,
            Self::I117 => 116.913648f64,
            Self::I118 => 117.913074f64,
            Self::I119 => 118.910074f64,
            Self::I120 => 119.910087f64,
            Self::I121 => 120.9074051f64,
            Self::I122 => 121.9075888f64,
            Self::I123 => 122.9055885f64,
            Self::I124 => 123.906209f64,
            Self::I125 => 124.9046294f64,
            Self::I126 => 125.9056233f64,
            Self::I127 => 126.9044719f64,
            Self::I128 => 127.9058086f64,
            Self::I129 => 128.9049837f64,
            Self::I130 => 129.9066702f64,
            Self::I131 => 130.9061263f64,
            Self::I132 => 131.9079935f64,
            Self::I133 => 132.907797f64,
            Self::I134 => 133.9097588f64,
            Self::I135 => 134.9100488f64,
            Self::I136 => 135.914604f64,
            Self::I137 => 136.9180282f64,
            Self::I138 => 137.9227264f64,
            Self::I139 => 138.926506f64,
            Self::I140 => 139.93173f64,
            Self::I141 => 140.93569f64,
            Self::I142 => 141.9412f64,
            Self::I143 => 142.94565f64,
            Self::I144 => 143.95139f64,
            Self::I145 => 144.95605f64,
        }
    }
}
impl super::ElementVariant for IodineIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::I
    }
}
impl super::MassNumber for IodineIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::I107 => 107u16,
            Self::I108 => 108u16,
            Self::I109 => 109u16,
            Self::I110 => 110u16,
            Self::I111 => 111u16,
            Self::I112 => 112u16,
            Self::I113 => 113u16,
            Self::I114 => 114u16,
            Self::I115 => 115u16,
            Self::I116 => 116u16,
            Self::I117 => 117u16,
            Self::I118 => 118u16,
            Self::I119 => 119u16,
            Self::I120 => 120u16,
            Self::I121 => 121u16,
            Self::I122 => 122u16,
            Self::I123 => 123u16,
            Self::I124 => 124u16,
            Self::I125 => 125u16,
            Self::I126 => 126u16,
            Self::I127 => 127u16,
            Self::I128 => 128u16,
            Self::I129 => 129u16,
            Self::I130 => 130u16,
            Self::I131 => 131u16,
            Self::I132 => 132u16,
            Self::I133 => 133u16,
            Self::I134 => 134u16,
            Self::I135 => 135u16,
            Self::I136 => 136u16,
            Self::I137 => 137u16,
            Self::I138 => 138u16,
            Self::I139 => 139u16,
            Self::I140 => 140u16,
            Self::I141 => 141u16,
            Self::I142 => 142u16,
            Self::I143 => 143u16,
            Self::I144 => 144u16,
            Self::I145 => 145u16,
        }
    }
}
impl super::IsotopicComposition for IodineIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::I107 => None,
            Self::I108 => None,
            Self::I109 => None,
            Self::I110 => None,
            Self::I111 => None,
            Self::I112 => None,
            Self::I113 => None,
            Self::I114 => None,
            Self::I115 => None,
            Self::I116 => None,
            Self::I117 => None,
            Self::I118 => None,
            Self::I119 => None,
            Self::I120 => None,
            Self::I121 => None,
            Self::I122 => None,
            Self::I123 => None,
            Self::I124 => None,
            Self::I125 => None,
            Self::I126 => None,
            Self::I127 => Some(1f64),
            Self::I128 => None,
            Self::I129 => None,
            Self::I130 => None,
            Self::I131 => None,
            Self::I132 => None,
            Self::I133 => None,
            Self::I134 => None,
            Self::I135 => None,
            Self::I136 => None,
            Self::I137 => None,
            Self::I138 => None,
            Self::I139 => None,
            Self::I140 => None,
            Self::I141 => None,
            Self::I142 => None,
            Self::I143 => None,
            Self::I144 => None,
            Self::I145 => None,
        }
    }
}
impl super::MostCommonIsotope for IodineIsotope {
    fn most_common_isotope() -> Self {
        Self::I127
    }
}
