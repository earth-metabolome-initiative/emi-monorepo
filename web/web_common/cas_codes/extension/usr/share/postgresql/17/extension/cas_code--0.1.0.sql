/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::CAS
CREATE TYPE CAS;

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_in
CREATE  FUNCTION "cas_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS CAS /* core::option::Option<cas_codes::CAS> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_in_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_out
CREATE  FUNCTION "cas_out"(
	"input" CAS /* cas_codes::CAS */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_out_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_recv
CREATE  FUNCTION "cas_recv"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS CAS /* cas_codes::CAS */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_recv_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_send
CREATE  FUNCTION "cas_send"(
	"input" CAS /* cas_codes::CAS */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_send_wrapper';


-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::CAS
CREATE TYPE CAS (
	INTERNALLENGTH = variable,
	INPUT = cas_in, /* cas_codes::cas_in */
	OUTPUT = cas_out, /* cas_codes::cas_out */
	RECEIVE = cas_recv, /* cas_codes::cas_recv */
	SEND = cas_send, /* cas_codes::cas_send */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_cmp
CREATE  FUNCTION "cas_cmp"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_cmp_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_eq
CREATE  FUNCTION "cas_eq"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_eq_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_eq
CREATE OPERATOR = (
	PROCEDURE="cas_eq",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_ge
CREATE  FUNCTION "cas_ge"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_ge_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_ge
CREATE OPERATOR >= (
	PROCEDURE="cas_ge",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_gt
CREATE  FUNCTION "cas_gt"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_gt_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_gt
CREATE OPERATOR > (
	PROCEDURE="cas_gt",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_hash
CREATE  FUNCTION "cas_hash"(
	"value" CAS /* cas_codes::CAS */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_hash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_le
CREATE  FUNCTION "cas_le"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_le_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_le
CREATE OPERATOR <= (
	PROCEDURE="cas_le",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_lt
CREATE  FUNCTION "cas_lt"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_lt_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_lt
CREATE OPERATOR < (
	PROCEDURE="cas_lt",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_ne
CREATE  FUNCTION "cas_ne"(
	"left" CAS, /* cas_codes::CAS */
	"right" CAS /* cas_codes::CAS */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'cas_ne_wrapper';

-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::cas_ne
CREATE OPERATOR <> (
	PROCEDURE="cas_ne",
	LEFTARG=CAS, /* cas_codes::CAS */
	RIGHTARG=CAS, /* cas_codes::CAS */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::CAS
CREATE OPERATOR FAMILY CAS_btree_ops USING btree;
CREATE OPERATOR CLASS CAS_btree_ops DEFAULT FOR TYPE CAS USING btree FAMILY CAS_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 cas_cmp(CAS, CAS);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/cas_codes/src/lib.rs:26
-- cas_codes::CAS
CREATE OPERATOR FAMILY CAS_hash_ops USING hash;
CREATE OPERATOR CLASS CAS_hash_ops DEFAULT FOR TYPE CAS USING hash FAMILY CAS_hash_ops AS
	OPERATOR    1   =  (CAS, CAS),
	FUNCTION    1   cas_hash(CAS);
/* </end connected objects> */

