#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum LeadIsotope {
    Pb178,
    Pb179,
    Pb180,
    Pb181,
    Pb182,
    Pb183,
    Pb184,
    Pb185,
    Pb186,
    Pb187,
    Pb188,
    Pb189,
    Pb190,
    Pb191,
    Pb192,
    Pb193,
    Pb194,
    Pb195,
    Pb196,
    Pb197,
    Pb198,
    Pb199,
    Pb200,
    Pb201,
    Pb202,
    Pb203,
    Pb204,
    Pb205,
    Pb206,
    Pb207,
    Pb208,
    Pb209,
    Pb210,
    Pb211,
    Pb212,
    Pb213,
    Pb214,
    Pb215,
    Pb216,
    Pb217,
    Pb218,
    Pb219,
    Pb220,
}
impl super::RelativeAtomicMass for LeadIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Pb178 => 178.003831f64,
            Self::Pb179 => 179.002201f64,
            Self::Pb180 => 179.997928f64,
            Self::Pb181 => 180.996653f64,
            Self::Pb182 => 181.992672f64,
            Self::Pb183 => 182.991872f64,
            Self::Pb184 => 183.988136f64,
            Self::Pb185 => 184.98761f64,
            Self::Pb186 => 185.984238f64,
            Self::Pb187 => 186.9839109f64,
            Self::Pb188 => 187.980875f64,
            Self::Pb189 => 188.980807f64,
            Self::Pb190 => 189.978082f64,
            Self::Pb191 => 190.978276f64,
            Self::Pb192 => 191.975775f64,
            Self::Pb193 => 192.976173f64,
            Self::Pb194 => 193.974012f64,
            Self::Pb195 => 194.974543f64,
            Self::Pb196 => 195.972774f64,
            Self::Pb197 => 196.9734312f64,
            Self::Pb198 => 197.972034f64,
            Self::Pb199 => 198.972913f64,
            Self::Pb200 => 199.971819f64,
            Self::Pb201 => 200.972883f64,
            Self::Pb202 => 201.972152f64,
            Self::Pb203 => 202.9733911f64,
            Self::Pb204 => 203.973044f64,
            Self::Pb205 => 204.9744822f64,
            Self::Pb206 => 205.9744657f64,
            Self::Pb207 => 206.9758973f64,
            Self::Pb208 => 207.9766525f64,
            Self::Pb209 => 208.9810905f64,
            Self::Pb210 => 209.9841889f64,
            Self::Pb211 => 210.9887371f64,
            Self::Pb212 => 211.9918977f64,
            Self::Pb213 => 212.9965629f64,
            Self::Pb214 => 213.9998059f64,
            Self::Pb215 => 215.00474f64,
            Self::Pb216 => 216.00803f64,
            Self::Pb217 => 217.01314f64,
            Self::Pb218 => 218.01659f64,
            Self::Pb219 => 219.02177f64,
            Self::Pb220 => 220.02541f64,
        }
    }
}
impl super::ElementVariant for LeadIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Pb
    }
}
impl super::MassNumber for LeadIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Pb178 => 178u16,
            Self::Pb179 => 179u16,
            Self::Pb180 => 180u16,
            Self::Pb181 => 181u16,
            Self::Pb182 => 182u16,
            Self::Pb183 => 183u16,
            Self::Pb184 => 184u16,
            Self::Pb185 => 185u16,
            Self::Pb186 => 186u16,
            Self::Pb187 => 187u16,
            Self::Pb188 => 188u16,
            Self::Pb189 => 189u16,
            Self::Pb190 => 190u16,
            Self::Pb191 => 191u16,
            Self::Pb192 => 192u16,
            Self::Pb193 => 193u16,
            Self::Pb194 => 194u16,
            Self::Pb195 => 195u16,
            Self::Pb196 => 196u16,
            Self::Pb197 => 197u16,
            Self::Pb198 => 198u16,
            Self::Pb199 => 199u16,
            Self::Pb200 => 200u16,
            Self::Pb201 => 201u16,
            Self::Pb202 => 202u16,
            Self::Pb203 => 203u16,
            Self::Pb204 => 204u16,
            Self::Pb205 => 205u16,
            Self::Pb206 => 206u16,
            Self::Pb207 => 207u16,
            Self::Pb208 => 208u16,
            Self::Pb209 => 209u16,
            Self::Pb210 => 210u16,
            Self::Pb211 => 211u16,
            Self::Pb212 => 212u16,
            Self::Pb213 => 213u16,
            Self::Pb214 => 214u16,
            Self::Pb215 => 215u16,
            Self::Pb216 => 216u16,
            Self::Pb217 => 217u16,
            Self::Pb218 => 218u16,
            Self::Pb219 => 219u16,
            Self::Pb220 => 220u16,
        }
    }
}
impl super::IsotopicComposition for LeadIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Pb178 => None,
            Self::Pb179 => None,
            Self::Pb180 => None,
            Self::Pb181 => None,
            Self::Pb182 => None,
            Self::Pb183 => None,
            Self::Pb184 => None,
            Self::Pb185 => None,
            Self::Pb186 => None,
            Self::Pb187 => None,
            Self::Pb188 => None,
            Self::Pb189 => None,
            Self::Pb190 => None,
            Self::Pb191 => None,
            Self::Pb192 => None,
            Self::Pb193 => None,
            Self::Pb194 => None,
            Self::Pb195 => None,
            Self::Pb196 => None,
            Self::Pb197 => None,
            Self::Pb198 => None,
            Self::Pb199 => None,
            Self::Pb200 => None,
            Self::Pb201 => None,
            Self::Pb202 => None,
            Self::Pb203 => None,
            Self::Pb204 => Some(0.014f64),
            Self::Pb205 => None,
            Self::Pb206 => Some(0.241f64),
            Self::Pb207 => Some(0.221f64),
            Self::Pb208 => Some(0.524f64),
            Self::Pb209 => None,
            Self::Pb210 => None,
            Self::Pb211 => None,
            Self::Pb212 => None,
            Self::Pb213 => None,
            Self::Pb214 => None,
            Self::Pb215 => None,
            Self::Pb216 => None,
            Self::Pb217 => None,
            Self::Pb218 => None,
            Self::Pb219 => None,
            Self::Pb220 => None,
        }
    }
}
impl super::MostCommonIsotope for LeadIsotope {
    fn most_common_isotope() -> Self {
        Self::Pb208
    }
}
