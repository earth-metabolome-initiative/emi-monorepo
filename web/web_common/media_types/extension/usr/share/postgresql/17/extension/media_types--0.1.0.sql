/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::MediaType
CREATE TYPE MediaType;

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_in
CREATE  FUNCTION "mediatype_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS MediaType /* core::option::Option<media_types::MediaType> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_in_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_out
CREATE  FUNCTION "mediatype_out"(
	"input" MediaType /* media_types::MediaType */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_out_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_recv
CREATE  FUNCTION "mediatype_recv"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS MediaType /* media_types::MediaType */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_recv_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_send
CREATE  FUNCTION "mediatype_send"(
	"input" MediaType /* media_types::MediaType */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_send_wrapper';


-- web/web_common/media_types/src/lib.rs:31
-- media_types::MediaType
CREATE TYPE MediaType (
	INTERNALLENGTH = variable,
	INPUT = mediatype_in, /* media_types::mediatype_in */
	OUTPUT = mediatype_out, /* media_types::mediatype_out */
	RECEIVE = mediatype_recv, /* media_types::mediatype_recv */
	SEND = mediatype_send, /* media_types::mediatype_send */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_cmp
CREATE  FUNCTION "mediatype_cmp"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_cmp_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_eq
CREATE  FUNCTION "mediatype_eq"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_eq_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_eq
CREATE OPERATOR = (
	PROCEDURE="mediatype_eq",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_ge
CREATE  FUNCTION "mediatype_ge"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_ge_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_ge
CREATE OPERATOR >= (
	PROCEDURE="mediatype_ge",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_gt
CREATE  FUNCTION "mediatype_gt"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_gt_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_gt
CREATE OPERATOR > (
	PROCEDURE="mediatype_gt",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_hash
CREATE  FUNCTION "mediatype_hash"(
	"value" MediaType /* media_types::MediaType */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_hash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_le
CREATE  FUNCTION "mediatype_le"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_le_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_le
CREATE OPERATOR <= (
	PROCEDURE="mediatype_le",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_lt
CREATE  FUNCTION "mediatype_lt"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_lt_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_lt
CREATE OPERATOR < (
	PROCEDURE="mediatype_lt",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_ne
CREATE  FUNCTION "mediatype_ne"(
	"left" MediaType, /* media_types::MediaType */
	"right" MediaType /* media_types::MediaType */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'mediatype_ne_wrapper';

-- web/web_common/media_types/src/lib.rs:31
-- media_types::mediatype_ne
CREATE OPERATOR <> (
	PROCEDURE="mediatype_ne",
	LEFTARG=MediaType, /* media_types::MediaType */
	RIGHTARG=MediaType, /* media_types::MediaType */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::MediaType
CREATE OPERATOR FAMILY MediaType_btree_ops USING btree;
CREATE OPERATOR CLASS MediaType_btree_ops DEFAULT FOR TYPE MediaType USING btree FAMILY MediaType_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 mediatype_cmp(MediaType, MediaType);
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/media_types/src/lib.rs:31
-- media_types::MediaType
CREATE OPERATOR FAMILY MediaType_hash_ops USING hash;
CREATE OPERATOR CLASS MediaType_hash_ops DEFAULT FOR TYPE MediaType USING hash FAMILY MediaType_hash_ops AS
	OPERATOR    1   =  (MediaType, MediaType),
	FUNCTION    1   mediatype_hash(MediaType);
/* </end connected objects> */

