impl super::Rows {
    pub fn len(&self) -> usize {
        match self {
            super::Rows::Address(rows) => rows.len(),
            super::Rows::AliquotingProcedureTemplate(rows) => rows.len(),
            super::Rows::AliquotingProcedure(rows) => rows.len(),
            super::Rows::AssetCompatibilityRule(rows) => rows.len(),
            super::Rows::AssetModelAncestor(rows) => rows.len(),
            super::Rows::AssetModel(rows) => rows.len(),
            super::Rows::Asset(rows) => rows.len(),
            super::Rows::BallMillMachineModel(rows) => rows.len(),
            super::Rows::BallMillMachine(rows) => rows.len(),
            super::Rows::BallMillProcedureTemplate(rows) => rows.len(),
            super::Rows::BallMillProcedure(rows) => rows.len(),
            super::Rows::BeadModel(rows) => rows.len(),
            super::Rows::Brand(rows) => rows.len(),
            super::Rows::CameraModel(rows) => rows.len(),
            super::Rows::Camera(rows) => rows.len(),
            super::Rows::CapModel(rows) => rows.len(),
            super::Rows::CappingProcedureTemplate(rows) => rows.len(),
            super::Rows::CappingProcedure(rows) => rows.len(),
            super::Rows::CentrifugeModel(rows) => rows.len(),
            super::Rows::CentrifugeProcedureTemplate(rows) => rows.len(),
            super::Rows::CentrifugeProcedure(rows) => rows.len(),
            super::Rows::Centrifuge(rows) => rows.len(),
            super::Rows::City(rows) => rows.len(),
            super::Rows::Color(rows) => rows.len(),
            super::Rows::CommercialBallMillMachineLot(rows) => rows.len(),
            super::Rows::CommercialBallMillMachineModel(rows) => rows.len(),
            super::Rows::CommercialBeadLot(rows) => rows.len(),
            super::Rows::CommercialBeadModel(rows) => rows.len(),
            super::Rows::CommercialCameraLot(rows) => rows.len(),
            super::Rows::CommercialCameraModel(rows) => rows.len(),
            super::Rows::CommercialCapLot(rows) => rows.len(),
            super::Rows::CommercialCapModel(rows) => rows.len(),
            super::Rows::CommercialCentrifugeLot(rows) => rows.len(),
            super::Rows::CommercialCentrifugeModel(rows) => rows.len(),
            super::Rows::CommercialFreezeDryerLot(rows) => rows.len(),
            super::Rows::CommercialFreezeDryerModel(rows) => rows.len(),
            super::Rows::CommercialFreezerLot(rows) => rows.len(),
            super::Rows::CommercialFreezerModel(rows) => rows.len(),
            super::Rows::CommercialPackagingLot(rows) => rows.len(),
            super::Rows::CommercialPackagingModel(rows) => rows.len(),
            super::Rows::CommercialPipetteLot(rows) => rows.len(),
            super::Rows::CommercialPipetteModel(rows) => rows.len(),
            super::Rows::CommercialPipetteTipLot(rows) => rows.len(),
            super::Rows::CommercialPipetteTipModel(rows) => rows.len(),
            super::Rows::CommercialPositioningDeviceLot(rows) => rows.len(),
            super::Rows::CommercialPositioningDeviceModel(rows) => rows.len(),
            super::Rows::CommercialProductLot(rows) => rows.len(),
            super::Rows::CommercialProduct(rows) => rows.len(),
            super::Rows::CommercialVolumeMeasuringDeviceLot(rows) => rows.len(),
            super::Rows::CommercialVolumeMeasuringDeviceModel(rows) => rows.len(),
            super::Rows::CommercialWeighingDeviceLot(rows) => rows.len(),
            super::Rows::CommercialWeighingDeviceModel(rows) => rows.len(),
            super::Rows::ContainerCompatibilityRule(rows) => rows.len(),
            super::Rows::ContainerModel(rows) => rows.len(),
            super::Rows::Container(rows) => rows.len(),
            super::Rows::Country(rows) => rows.len(),
            super::Rows::DigitalAssetModel(rows) => rows.len(),
            super::Rows::DigitalAsset(rows) => rows.len(),
            super::Rows::DisposalProcedureTemplate(rows) => rows.len(),
            super::Rows::DisposalProcedure(rows) => rows.len(),
            super::Rows::Document(rows) => rows.len(),
            super::Rows::EmailProvider(rows) => rows.len(),
            super::Rows::FractioningProcedureTemplate(rows) => rows.len(),
            super::Rows::FractioningProcedure(rows) => rows.len(),
            super::Rows::FreezeDryerModel(rows) => rows.len(),
            super::Rows::FreezeDryer(rows) => rows.len(),
            super::Rows::FreezeDryingProcedureTemplate(rows) => rows.len(),
            super::Rows::FreezeDryingProcedure(rows) => rows.len(),
            super::Rows::FreezerModel(rows) => rows.len(),
            super::Rows::Freezer(rows) => rows.len(),
            super::Rows::FreezingProcedureTemplate(rows) => rows.len(),
            super::Rows::FreezingProcedure(rows) => rows.len(),
            super::Rows::GeolocationProcedureTemplate(rows) => rows.len(),
            super::Rows::GeolocationProcedure(rows) => rows.len(),
            super::Rows::InstrumentState(rows) => rows.len(),
            super::Rows::LoginProvider(rows) => rows.len(),
            super::Rows::Material(rows) => rows.len(),
            super::Rows::NextProcedureTemplate(rows) => rows.len(),
            super::Rows::ObservationSubject(rows) => rows.len(),
            super::Rows::OrganismTaxon(rows) => rows.len(),
            super::Rows::Organism(rows) => rows.len(),
            super::Rows::Organization(rows) => rows.len(),
            super::Rows::PackagingModel(rows) => rows.len(),
            super::Rows::PackagingProcedureTemplate(rows) => rows.len(),
            super::Rows::PackagingProcedure(rows) => rows.len(),
            super::Rows::ParentProcedureTemplate(rows) => rows.len(),
            super::Rows::PermanenceCategory(rows) => rows.len(),
            super::Rows::PhoneModel(rows) => rows.len(),
            super::Rows::PhotographProcedureTemplate(rows) => rows.len(),
            super::Rows::PhotographProcedure(rows) => rows.len(),
            super::Rows::PhysicalAssetModel(rows) => rows.len(),
            super::Rows::PhysicalAsset(rows) => rows.len(),
            super::Rows::PipetteModel(rows) => rows.len(),
            super::Rows::PipetteTipModel(rows) => rows.len(),
            super::Rows::Pipette(rows) => rows.len(),
            super::Rows::PositioningDeviceModel(rows) => rows.len(),
            super::Rows::PositioningDevice(rows) => rows.len(),
            super::Rows::PouringProcedureTemplate(rows) => rows.len(),
            super::Rows::PouringProcedure(rows) => rows.len(),
            super::Rows::ProcedureAsset(rows) => rows.len(),
            super::Rows::ProcedureTemplateAssetModel(rows) => rows.len(),
            super::Rows::ProcedureTemplate(rows) => rows.len(),
            super::Rows::Procedure(rows) => rows.len(),
            super::Rows::ProjectState(rows) => rows.len(),
            super::Rows::Project(rows) => rows.len(),
            super::Rows::Rank(rows) => rows.len(),
            super::Rows::ReagentModel(rows) => rows.len(),
            super::Rows::Role(rows) => rows.len(),
            super::Rows::Room(rows) => rows.len(),
            super::Rows::SampleState(rows) => rows.len(),
            super::Rows::SpatialRefSy(rows) => rows.len(),
            super::Rows::Spectrum(rows) => rows.len(),
            super::Rows::SpectraCollection(rows) => rows.len(),
            super::Rows::StorageProcedureTemplate(rows) => rows.len(),
            super::Rows::StorageProcedure(rows) => rows.len(),
            super::Rows::SupernatantProcedureTemplate(rows) => rows.len(),
            super::Rows::SupernatantProcedure(rows) => rows.len(),
            super::Rows::Taxon(rows) => rows.len(),
            super::Rows::TeamMember(rows) => rows.len(),
            super::Rows::TeamProject(rows) => rows.len(),
            super::Rows::TeamState(rows) => rows.len(),
            super::Rows::Team(rows) => rows.len(),
            super::Rows::TemporaryUser(rows) => rows.len(),
            super::Rows::Unit(rows) => rows.len(),
            super::Rows::UserEmail(rows) => rows.len(),
            super::Rows::UserOrganization(rows) => rows.len(),
            super::Rows::User(rows) => rows.len(),
            super::Rows::VolumeMeasuringDeviceModel(rows) => rows.len(),
            super::Rows::VolumeMeasuringDevice(rows) => rows.len(),
            super::Rows::VolumetricContainerModel(rows) => rows.len(),
            super::Rows::VolumetricContainer(rows) => rows.len(),
            super::Rows::WeighingDeviceModel(rows) => rows.len(),
            super::Rows::WeighingDevice(rows) => rows.len(),
            super::Rows::WeighingProcedureTemplate(rows) => rows.len(),
            super::Rows::WeighingProcedure(rows) => rows.len(),
        }
    }
    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }
}
