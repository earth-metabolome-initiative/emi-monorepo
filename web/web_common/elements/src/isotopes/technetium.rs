#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum TechnetiumIsotope {
    Tc85,
    Tc86,
    Tc87,
    Tc88,
    Tc89,
    Tc90,
    Tc91,
    Tc92,
    Tc93,
    Tc94,
    Tc95,
    Tc96,
    Tc97,
    Tc98,
    Tc99,
    Tc100,
    Tc101,
    Tc102,
    Tc103,
    Tc104,
    Tc105,
    Tc106,
    Tc107,
    Tc108,
    Tc109,
    Tc110,
    Tc111,
    Tc112,
    Tc113,
    Tc114,
    Tc115,
    Tc116,
    Tc117,
    Tc118,
    Tc119,
    Tc120,
}
impl super::RelativeAtomicMass for TechnetiumIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Tc85 => 84.95058f64,
            Self::Tc86 => 85.94493f64,
            Self::Tc87 => 86.9380672f64,
            Self::Tc88 => 87.93378f64,
            Self::Tc89 => 88.9276487f64,
            Self::Tc90 => 89.9240739f64,
            Self::Tc91 => 90.9184254f64,
            Self::Tc92 => 91.9152698f64,
            Self::Tc93 => 92.910246f64,
            Self::Tc94 => 93.9096536f64,
            Self::Tc95 => 94.9076536f64,
            Self::Tc96 => 95.907868f64,
            Self::Tc97 => 96.9063667f64,
            Self::Tc98 => 97.9072124f64,
            Self::Tc99 => 98.9062508f64,
            Self::Tc100 => 99.9076539f64,
            Self::Tc101 => 100.907309f64,
            Self::Tc102 => 101.9092097f64,
            Self::Tc103 => 102.909176f64,
            Self::Tc104 => 103.911425f64,
            Self::Tc105 => 104.911655f64,
            Self::Tc106 => 105.914358f64,
            Self::Tc107 => 106.9154606f64,
            Self::Tc108 => 107.9184957f64,
            Self::Tc109 => 108.920256f64,
            Self::Tc110 => 109.923744f64,
            Self::Tc111 => 110.925901f64,
            Self::Tc112 => 111.9299458f64,
            Self::Tc113 => 112.932569f64,
            Self::Tc114 => 113.93691f64,
            Self::Tc115 => 114.93998f64,
            Self::Tc116 => 115.94476f64,
            Self::Tc117 => 116.94806f64,
            Self::Tc118 => 117.95299f64,
            Self::Tc119 => 118.95666f64,
            Self::Tc120 => 119.96187f64,
        }
    }
}
impl super::ElementVariant for TechnetiumIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Tc
    }
}
impl super::MassNumber for TechnetiumIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Tc85 => 85u16,
            Self::Tc86 => 86u16,
            Self::Tc87 => 87u16,
            Self::Tc88 => 88u16,
            Self::Tc89 => 89u16,
            Self::Tc90 => 90u16,
            Self::Tc91 => 91u16,
            Self::Tc92 => 92u16,
            Self::Tc93 => 93u16,
            Self::Tc94 => 94u16,
            Self::Tc95 => 95u16,
            Self::Tc96 => 96u16,
            Self::Tc97 => 97u16,
            Self::Tc98 => 98u16,
            Self::Tc99 => 99u16,
            Self::Tc100 => 100u16,
            Self::Tc101 => 101u16,
            Self::Tc102 => 102u16,
            Self::Tc103 => 103u16,
            Self::Tc104 => 104u16,
            Self::Tc105 => 105u16,
            Self::Tc106 => 106u16,
            Self::Tc107 => 107u16,
            Self::Tc108 => 108u16,
            Self::Tc109 => 109u16,
            Self::Tc110 => 110u16,
            Self::Tc111 => 111u16,
            Self::Tc112 => 112u16,
            Self::Tc113 => 113u16,
            Self::Tc114 => 114u16,
            Self::Tc115 => 115u16,
            Self::Tc116 => 116u16,
            Self::Tc117 => 117u16,
            Self::Tc118 => 118u16,
            Self::Tc119 => 119u16,
            Self::Tc120 => 120u16,
        }
    }
}
impl super::IsotopicComposition for TechnetiumIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Tc85 => None,
            Self::Tc86 => None,
            Self::Tc87 => None,
            Self::Tc88 => None,
            Self::Tc89 => None,
            Self::Tc90 => None,
            Self::Tc91 => None,
            Self::Tc92 => None,
            Self::Tc93 => None,
            Self::Tc94 => None,
            Self::Tc95 => None,
            Self::Tc96 => None,
            Self::Tc97 => None,
            Self::Tc98 => None,
            Self::Tc99 => None,
            Self::Tc100 => None,
            Self::Tc101 => None,
            Self::Tc102 => None,
            Self::Tc103 => None,
            Self::Tc104 => None,
            Self::Tc105 => None,
            Self::Tc106 => None,
            Self::Tc107 => None,
            Self::Tc108 => None,
            Self::Tc109 => None,
            Self::Tc110 => None,
            Self::Tc111 => None,
            Self::Tc112 => None,
            Self::Tc113 => None,
            Self::Tc114 => None,
            Self::Tc115 => None,
            Self::Tc116 => None,
            Self::Tc117 => None,
            Self::Tc118 => None,
            Self::Tc119 => None,
            Self::Tc120 => None,
        }
    }
}
impl super::MostCommonIsotope for TechnetiumIsotope {
    fn most_common_isotope() -> Self {
        Self::Tc120
    }
}
