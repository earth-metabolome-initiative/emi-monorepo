/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::PositiveU32
CREATE TYPE PositiveU32;

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_in
CREATE  FUNCTION "positiveu32_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS PositiveU32 /* core::option::Option<example_extension::PositiveU32> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_in_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_out
CREATE  FUNCTION "positiveu32_out"(
	"input" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_out_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_recv
CREATE  FUNCTION "positiveu32_recv"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS PositiveU32 /* example_extension::PositiveU32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_recv_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_send
CREATE  FUNCTION "positiveu32_send"(
	"input" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_send_wrapper';


-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::PositiveU32
CREATE TYPE PositiveU32 (
	INTERNALLENGTH = variable,
	INPUT = positiveu32_in, /* example_extension::positiveu32_in */
	OUTPUT = positiveu32_out, /* example_extension::positiveu32_out */
	RECEIVE = positiveu32_recv, /* example_extension::positiveu32_recv */
	SEND = positiveu32_send, /* example_extension::positiveu32_send */
	STORAGE = extended
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_cmp
CREATE  FUNCTION "positiveu32_cmp"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_cmp_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_eq
CREATE  FUNCTION "positiveu32_eq"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_eq_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_eq
CREATE OPERATOR = (
	PROCEDURE="positiveu32_eq",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = =,
	NEGATOR = <>,
	RESTRICT = eqsel,
	JOIN = eqjoinsel,
	HASHES,
	MERGES
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_ge
CREATE  FUNCTION "positiveu32_ge"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_ge_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_ge
CREATE OPERATOR >= (
	PROCEDURE="positiveu32_ge",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = <=,
	NEGATOR = <,
	RESTRICT = scalargesel,
	JOIN = scalargejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_gt
CREATE  FUNCTION "positiveu32_gt"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_gt_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_gt
CREATE OPERATOR > (
	PROCEDURE="positiveu32_gt",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = <,
	NEGATOR = <=,
	RESTRICT = scalargtsel,
	JOIN = scalargtjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_hash
CREATE  FUNCTION "positiveu32_hash"(
	"value" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS INT /* i32 */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_hash_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_le
CREATE  FUNCTION "positiveu32_le"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_le_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_le
CREATE OPERATOR <= (
	PROCEDURE="positiveu32_le",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = >=,
	NEGATOR = >,
	RESTRICT = scalarlesel,
	JOIN = scalarlejoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_lt
CREATE  FUNCTION "positiveu32_lt"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_lt_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_lt
CREATE OPERATOR < (
	PROCEDURE="positiveu32_lt",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = >,
	NEGATOR = >=,
	RESTRICT = scalarltsel,
	JOIN = scalarltjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_ne
CREATE  FUNCTION "positiveu32_ne"(
	"left" PositiveU32, /* example_extension::PositiveU32 */
	"right" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'positiveu32_ne_wrapper';

-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::positiveu32_ne
CREATE OPERATOR <> (
	PROCEDURE="positiveu32_ne",
	LEFTARG=PositiveU32, /* example_extension::PositiveU32 */
	RIGHTARG=PositiveU32, /* example_extension::PositiveU32 */
	COMMUTATOR = <>,
	NEGATOR = =,
	RESTRICT = neqsel,
	JOIN = neqjoinsel
);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:31
-- example_extension::validate_positive_u32
CREATE  FUNCTION "validate_positive_u32"(
	"value" PositiveU32 /* example_extension::PositiveU32 */
) RETURNS bool /* bool */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'validate_positive_u32_wrapper';
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::PositiveU32
CREATE OPERATOR FAMILY PositiveU32_btree_ops USING btree;
CREATE OPERATOR CLASS PositiveU32_btree_ops DEFAULT FOR TYPE PositiveU32 USING btree FAMILY PositiveU32_btree_ops AS
	OPERATOR 1 <,
	OPERATOR 2 <=,
	OPERATOR 3 =,
	OPERATOR 4 >=,
	OPERATOR 5 >,
	FUNCTION 1 positiveu32_cmp(PositiveU32, PositiveU32);
/* </end connected objects> */

/* <begin connected objects> */
-- utils/diesel_pgrx/example_extension/src/lib.rs:10
-- example_extension::PositiveU32
CREATE OPERATOR FAMILY PositiveU32_hash_ops USING hash;
CREATE OPERATOR CLASS PositiveU32_hash_ops DEFAULT FOR TYPE PositiveU32 USING hash FAMILY PositiveU32_hash_ops AS
	OPERATOR    1   =  (PositiveU32, PositiveU32),
	FUNCTION    1   positiveu32_hash(PositiveU32);
/* </end connected objects> */

