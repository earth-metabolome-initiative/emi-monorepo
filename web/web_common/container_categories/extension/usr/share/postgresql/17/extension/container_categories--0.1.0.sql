/* <begin connected objects> */
/*
This file is auto generated by pgrx.

The ordering of items is not stable, it is driven by a dependency graph.
*/
/* </end connected objects> */

/* <begin connected objects> */
-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::ContainerCategory
CREATE TYPE ContainerCategory;

-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::containercategory_in
CREATE  FUNCTION "containercategory_in"(
	"input" cstring /* core::option::Option<&core::ffi::c_str::CStr> */
) RETURNS ContainerCategory /* core::option::Option<container_categories::ContainerCategory> */
IMMUTABLE PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'containercategory_in_wrapper';

-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::containercategory_out
CREATE  FUNCTION "containercategory_out"(
	"input" ContainerCategory /* container_categories::ContainerCategory */
) RETURNS cstring /* alloc::ffi::c_str::CString */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'containercategory_out_wrapper';

-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::containercategory_recv
CREATE  FUNCTION "containercategory_recv"(
	"internal" internal /* pgrx::datum::internal::Internal */
) RETURNS ContainerCategory /* container_categories::ContainerCategory */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'containercategory_recv_wrapper';

-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::containercategory_send
CREATE  FUNCTION "containercategory_send"(
	"input" ContainerCategory /* container_categories::ContainerCategory */
) RETURNS bytea /* alloc::vec::Vec<u8> */
IMMUTABLE STRICT PARALLEL SAFE
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'containercategory_send_wrapper';


-- web/web_common/container_categories/src/lib.rs:11
-- container_categories::ContainerCategory
CREATE TYPE ContainerCategory (
	INTERNALLENGTH = variable,
	INPUT = containercategory_in, /* container_categories::containercategory_in */
	OUTPUT = containercategory_out, /* container_categories::containercategory_out */
	RECEIVE = containercategory_recv, /* container_categories::containercategory_recv */
	SEND = containercategory_send, /* container_categories::containercategory_send */
	STORAGE = extended
);
/* </end connected objects> */

