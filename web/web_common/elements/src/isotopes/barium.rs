#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum BariumIsotope {
    Ba114,
    Ba115,
    Ba116,
    Ba117,
    Ba118,
    Ba119,
    Ba120,
    Ba121,
    Ba122,
    Ba123,
    Ba124,
    Ba125,
    Ba126,
    Ba127,
    Ba128,
    Ba129,
    Ba130,
    Ba131,
    Ba132,
    Ba133,
    Ba134,
    Ba135,
    Ba136,
    Ba137,
    Ba138,
    Ba139,
    Ba140,
    Ba141,
    Ba142,
    Ba143,
    Ba144,
    Ba145,
    Ba146,
    Ba147,
    Ba148,
    Ba149,
    Ba150,
    Ba151,
    Ba152,
    Ba153,
}
impl super::RelativeAtomicMass for BariumIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Ba114 => 113.95066f64,
            Self::Ba115 => 114.94737f64,
            Self::Ba116 => 115.94128f64,
            Self::Ba117 => 116.93814f64,
            Self::Ba118 => 117.93306f64,
            Self::Ba119 => 118.93066f64,
            Self::Ba120 => 119.92605f64,
            Self::Ba121 => 120.92405f64,
            Self::Ba122 => 121.919904f64,
            Self::Ba123 => 122.918781f64,
            Self::Ba124 => 123.915094f64,
            Self::Ba125 => 124.914472f64,
            Self::Ba126 => 125.91125f64,
            Self::Ba127 => 126.911091f64,
            Self::Ba128 => 127.908342f64,
            Self::Ba129 => 128.908681f64,
            Self::Ba130 => 129.9063207f64,
            Self::Ba131 => 130.906941f64,
            Self::Ba132 => 131.9050611f64,
            Self::Ba133 => 132.9060074f64,
            Self::Ba134 => 133.90450818f64,
            Self::Ba135 => 134.90568838f64,
            Self::Ba136 => 135.90457573f64,
            Self::Ba137 => 136.90582714f64,
            Self::Ba138 => 137.905247f64,
            Self::Ba139 => 138.9088411f64,
            Self::Ba140 => 139.9106057f64,
            Self::Ba141 => 140.9144033f64,
            Self::Ba142 => 141.9164324f64,
            Self::Ba143 => 142.9206253f64,
            Self::Ba144 => 143.9229549f64,
            Self::Ba145 => 144.9275184f64,
            Self::Ba146 => 145.930284f64,
            Self::Ba147 => 146.935304f64,
            Self::Ba148 => 147.938171f64,
            Self::Ba149 => 148.94308f64,
            Self::Ba150 => 149.94605f64,
            Self::Ba151 => 150.95127f64,
            Self::Ba152 => 151.95481f64,
            Self::Ba153 => 152.96036f64,
        }
    }
}
impl super::ElementVariant for BariumIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Ba
    }
}
impl super::MassNumber for BariumIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Ba114 => 114u16,
            Self::Ba115 => 115u16,
            Self::Ba116 => 116u16,
            Self::Ba117 => 117u16,
            Self::Ba118 => 118u16,
            Self::Ba119 => 119u16,
            Self::Ba120 => 120u16,
            Self::Ba121 => 121u16,
            Self::Ba122 => 122u16,
            Self::Ba123 => 123u16,
            Self::Ba124 => 124u16,
            Self::Ba125 => 125u16,
            Self::Ba126 => 126u16,
            Self::Ba127 => 127u16,
            Self::Ba128 => 128u16,
            Self::Ba129 => 129u16,
            Self::Ba130 => 130u16,
            Self::Ba131 => 131u16,
            Self::Ba132 => 132u16,
            Self::Ba133 => 133u16,
            Self::Ba134 => 134u16,
            Self::Ba135 => 135u16,
            Self::Ba136 => 136u16,
            Self::Ba137 => 137u16,
            Self::Ba138 => 138u16,
            Self::Ba139 => 139u16,
            Self::Ba140 => 140u16,
            Self::Ba141 => 141u16,
            Self::Ba142 => 142u16,
            Self::Ba143 => 143u16,
            Self::Ba144 => 144u16,
            Self::Ba145 => 145u16,
            Self::Ba146 => 146u16,
            Self::Ba147 => 147u16,
            Self::Ba148 => 148u16,
            Self::Ba149 => 149u16,
            Self::Ba150 => 150u16,
            Self::Ba151 => 151u16,
            Self::Ba152 => 152u16,
            Self::Ba153 => 153u16,
        }
    }
}
impl super::IsotopicComposition for BariumIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Ba114 => None,
            Self::Ba115 => None,
            Self::Ba116 => None,
            Self::Ba117 => None,
            Self::Ba118 => None,
            Self::Ba119 => None,
            Self::Ba120 => None,
            Self::Ba121 => None,
            Self::Ba122 => None,
            Self::Ba123 => None,
            Self::Ba124 => None,
            Self::Ba125 => None,
            Self::Ba126 => None,
            Self::Ba127 => None,
            Self::Ba128 => None,
            Self::Ba129 => None,
            Self::Ba130 => Some(0.00106f64),
            Self::Ba131 => None,
            Self::Ba132 => Some(0.00101f64),
            Self::Ba133 => None,
            Self::Ba134 => Some(0.02417f64),
            Self::Ba135 => Some(0.06592f64),
            Self::Ba136 => Some(0.07854f64),
            Self::Ba137 => Some(0.11232f64),
            Self::Ba138 => Some(0.71698f64),
            Self::Ba139 => None,
            Self::Ba140 => None,
            Self::Ba141 => None,
            Self::Ba142 => None,
            Self::Ba143 => None,
            Self::Ba144 => None,
            Self::Ba145 => None,
            Self::Ba146 => None,
            Self::Ba147 => None,
            Self::Ba148 => None,
            Self::Ba149 => None,
            Self::Ba150 => None,
            Self::Ba151 => None,
            Self::Ba152 => None,
            Self::Ba153 => None,
        }
    }
}
impl super::MostAbundantIsotope for BariumIsotope {
    fn most_abundant_isotope() -> Self {
        Self::Ba138
    }
}
impl std::fmt::Display for BariumIsotope {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Ba114 => write!(f, "Ba114"),
            Self::Ba115 => write!(f, "Ba115"),
            Self::Ba116 => write!(f, "Ba116"),
            Self::Ba117 => write!(f, "Ba117"),
            Self::Ba118 => write!(f, "Ba118"),
            Self::Ba119 => write!(f, "Ba119"),
            Self::Ba120 => write!(f, "Ba120"),
            Self::Ba121 => write!(f, "Ba121"),
            Self::Ba122 => write!(f, "Ba122"),
            Self::Ba123 => write!(f, "Ba123"),
            Self::Ba124 => write!(f, "Ba124"),
            Self::Ba125 => write!(f, "Ba125"),
            Self::Ba126 => write!(f, "Ba126"),
            Self::Ba127 => write!(f, "Ba127"),
            Self::Ba128 => write!(f, "Ba128"),
            Self::Ba129 => write!(f, "Ba129"),
            Self::Ba130 => write!(f, "Ba130"),
            Self::Ba131 => write!(f, "Ba131"),
            Self::Ba132 => write!(f, "Ba132"),
            Self::Ba133 => write!(f, "Ba133"),
            Self::Ba134 => write!(f, "Ba134"),
            Self::Ba135 => write!(f, "Ba135"),
            Self::Ba136 => write!(f, "Ba136"),
            Self::Ba137 => write!(f, "Ba137"),
            Self::Ba138 => write!(f, "Ba138"),
            Self::Ba139 => write!(f, "Ba139"),
            Self::Ba140 => write!(f, "Ba140"),
            Self::Ba141 => write!(f, "Ba141"),
            Self::Ba142 => write!(f, "Ba142"),
            Self::Ba143 => write!(f, "Ba143"),
            Self::Ba144 => write!(f, "Ba144"),
            Self::Ba145 => write!(f, "Ba145"),
            Self::Ba146 => write!(f, "Ba146"),
            Self::Ba147 => write!(f, "Ba147"),
            Self::Ba148 => write!(f, "Ba148"),
            Self::Ba149 => write!(f, "Ba149"),
            Self::Ba150 => write!(f, "Ba150"),
            Self::Ba151 => write!(f, "Ba151"),
            Self::Ba152 => write!(f, "Ba152"),
            Self::Ba153 => write!(f, "Ba153"),
        }
    }
}
