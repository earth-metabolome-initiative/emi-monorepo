#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum XenonIsotope {
    Xe109,
    Xe110,
    Xe111,
    Xe112,
    Xe113,
    Xe114,
    Xe115,
    Xe116,
    Xe117,
    Xe118,
    Xe119,
    Xe120,
    Xe121,
    Xe122,
    Xe123,
    Xe124,
    Xe125,
    Xe126,
    Xe127,
    Xe128,
    Xe129,
    Xe130,
    Xe131,
    Xe132,
    Xe133,
    Xe134,
    Xe135,
    Xe136,
    Xe137,
    Xe138,
    Xe139,
    Xe140,
    Xe141,
    Xe142,
    Xe143,
    Xe144,
    Xe145,
    Xe146,
    Xe147,
    Xe148,
}
impl super::RelativeAtomicMass for XenonIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Xe109 => 108.95043f64,
            Self::Xe110 => 109.94426f64,
            Self::Xe111 => 110.941607f64,
            Self::Xe112 => 111.935559f64,
            Self::Xe113 => 112.9332217f64,
            Self::Xe114 => 113.92798f64,
            Self::Xe115 => 114.926294f64,
            Self::Xe116 => 115.921581f64,
            Self::Xe117 => 116.920359f64,
            Self::Xe118 => 117.916179f64,
            Self::Xe119 => 118.915411f64,
            Self::Xe120 => 119.911784f64,
            Self::Xe121 => 120.911453f64,
            Self::Xe122 => 121.908368f64,
            Self::Xe123 => 122.908482f64,
            Self::Xe124 => 123.905892f64,
            Self::Xe125 => 124.9063944f64,
            Self::Xe126 => 125.9042983f64,
            Self::Xe127 => 126.9051829f64,
            Self::Xe128 => 127.903531f64,
            Self::Xe129 => 128.9047808611f64,
            Self::Xe130 => 129.903509349f64,
            Self::Xe131 => 130.90508406f64,
            Self::Xe132 => 131.9041550856f64,
            Self::Xe133 => 132.9059108f64,
            Self::Xe134 => 133.90539466f64,
            Self::Xe135 => 134.9072278f64,
            Self::Xe136 => 135.907214484f64,
            Self::Xe137 => 136.91155778f64,
            Self::Xe138 => 137.9141463f64,
            Self::Xe139 => 138.9187922f64,
            Self::Xe140 => 139.9216458f64,
            Self::Xe141 => 140.9267872f64,
            Self::Xe142 => 141.9299731f64,
            Self::Xe143 => 142.9353696f64,
            Self::Xe144 => 143.9389451f64,
            Self::Xe145 => 144.94472f64,
            Self::Xe146 => 145.948518f64,
            Self::Xe147 => 146.95426f64,
            Self::Xe148 => 147.95813f64,
        }
    }
}
impl super::ElementVariant for XenonIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Xe
    }
}
impl super::MassNumber for XenonIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Xe109 => 109u16,
            Self::Xe110 => 110u16,
            Self::Xe111 => 111u16,
            Self::Xe112 => 112u16,
            Self::Xe113 => 113u16,
            Self::Xe114 => 114u16,
            Self::Xe115 => 115u16,
            Self::Xe116 => 116u16,
            Self::Xe117 => 117u16,
            Self::Xe118 => 118u16,
            Self::Xe119 => 119u16,
            Self::Xe120 => 120u16,
            Self::Xe121 => 121u16,
            Self::Xe122 => 122u16,
            Self::Xe123 => 123u16,
            Self::Xe124 => 124u16,
            Self::Xe125 => 125u16,
            Self::Xe126 => 126u16,
            Self::Xe127 => 127u16,
            Self::Xe128 => 128u16,
            Self::Xe129 => 129u16,
            Self::Xe130 => 130u16,
            Self::Xe131 => 131u16,
            Self::Xe132 => 132u16,
            Self::Xe133 => 133u16,
            Self::Xe134 => 134u16,
            Self::Xe135 => 135u16,
            Self::Xe136 => 136u16,
            Self::Xe137 => 137u16,
            Self::Xe138 => 138u16,
            Self::Xe139 => 139u16,
            Self::Xe140 => 140u16,
            Self::Xe141 => 141u16,
            Self::Xe142 => 142u16,
            Self::Xe143 => 143u16,
            Self::Xe144 => 144u16,
            Self::Xe145 => 145u16,
            Self::Xe146 => 146u16,
            Self::Xe147 => 147u16,
            Self::Xe148 => 148u16,
        }
    }
}
impl super::IsotopicComposition for XenonIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Xe109 => None,
            Self::Xe110 => None,
            Self::Xe111 => None,
            Self::Xe112 => None,
            Self::Xe113 => None,
            Self::Xe114 => None,
            Self::Xe115 => None,
            Self::Xe116 => None,
            Self::Xe117 => None,
            Self::Xe118 => None,
            Self::Xe119 => None,
            Self::Xe120 => None,
            Self::Xe121 => None,
            Self::Xe122 => None,
            Self::Xe123 => None,
            Self::Xe124 => Some(0.000952f64),
            Self::Xe125 => None,
            Self::Xe126 => Some(0.00089f64),
            Self::Xe127 => None,
            Self::Xe128 => Some(0.019102f64),
            Self::Xe129 => Some(0.264006f64),
            Self::Xe130 => Some(0.04071f64),
            Self::Xe131 => Some(0.212324f64),
            Self::Xe132 => Some(0.269086f64),
            Self::Xe133 => None,
            Self::Xe134 => Some(0.104357f64),
            Self::Xe135 => None,
            Self::Xe136 => Some(0.088573f64),
            Self::Xe137 => None,
            Self::Xe138 => None,
            Self::Xe139 => None,
            Self::Xe140 => None,
            Self::Xe141 => None,
            Self::Xe142 => None,
            Self::Xe143 => None,
            Self::Xe144 => None,
            Self::Xe145 => None,
            Self::Xe146 => None,
            Self::Xe147 => None,
            Self::Xe148 => None,
        }
    }
}
impl super::MostCommonIsotope for XenonIsotope {
    fn most_common_isotope() -> Self {
        Self::Xe132
    }
}
