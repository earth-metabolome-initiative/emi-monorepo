#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum CaesiumIsotope {
    Cs112,
    Cs113,
    Cs114,
    Cs115,
    Cs116,
    Cs117,
    Cs118,
    Cs119,
    Cs120,
    Cs121,
    Cs122,
    Cs123,
    Cs124,
    Cs125,
    Cs126,
    Cs127,
    Cs128,
    Cs129,
    Cs130,
    Cs131,
    Cs132,
    Cs133,
    Cs134,
    Cs135,
    Cs136,
    Cs137,
    Cs138,
    Cs139,
    Cs140,
    Cs141,
    Cs142,
    Cs143,
    Cs144,
    Cs145,
    Cs146,
    Cs147,
    Cs148,
    Cs149,
    Cs150,
    Cs151,
}
impl super::RelativeAtomicMass for CaesiumIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Cs112 => 111.950309f64,
            Self::Cs113 => 112.9444291f64,
            Self::Cs114 => 113.941296f64,
            Self::Cs115 => 114.93591f64,
            Self::Cs116 => 115.93337f64,
            Self::Cs117 => 116.928617f64,
            Self::Cs118 => 117.92656f64,
            Self::Cs119 => 118.922377f64,
            Self::Cs120 => 119.920677f64,
            Self::Cs121 => 120.917227f64,
            Self::Cs122 => 121.916108f64,
            Self::Cs123 => 122.912996f64,
            Self::Cs124 => 123.9122578f64,
            Self::Cs125 => 124.909728f64,
            Self::Cs126 => 125.909446f64,
            Self::Cs127 => 126.9074174f64,
            Self::Cs128 => 127.9077487f64,
            Self::Cs129 => 128.9060657f64,
            Self::Cs130 => 129.9067093f64,
            Self::Cs131 => 130.9054649f64,
            Self::Cs132 => 131.9064339f64,
            Self::Cs133 => 132.905451961f64,
            Self::Cs134 => 133.906718503f64,
            Self::Cs135 => 134.905977f64,
            Self::Cs136 => 135.9073114f64,
            Self::Cs137 => 136.90708923f64,
            Self::Cs138 => 137.9110171f64,
            Self::Cs139 => 138.9133638f64,
            Self::Cs140 => 139.9172831f64,
            Self::Cs141 => 140.9200455f64,
            Self::Cs142 => 141.924296f64,
            Self::Cs143 => 142.927349f64,
            Self::Cs144 => 143.932076f64,
            Self::Cs145 => 144.935527f64,
            Self::Cs146 => 145.940344f64,
            Self::Cs147 => 146.944156f64,
            Self::Cs148 => 147.94923f64,
            Self::Cs149 => 148.95302f64,
            Self::Cs150 => 149.95833f64,
            Self::Cs151 => 150.96258f64,
        }
    }
}
impl super::ElementVariant for CaesiumIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Cs
    }
}
impl super::MassNumber for CaesiumIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Cs112 => 112u16,
            Self::Cs113 => 113u16,
            Self::Cs114 => 114u16,
            Self::Cs115 => 115u16,
            Self::Cs116 => 116u16,
            Self::Cs117 => 117u16,
            Self::Cs118 => 118u16,
            Self::Cs119 => 119u16,
            Self::Cs120 => 120u16,
            Self::Cs121 => 121u16,
            Self::Cs122 => 122u16,
            Self::Cs123 => 123u16,
            Self::Cs124 => 124u16,
            Self::Cs125 => 125u16,
            Self::Cs126 => 126u16,
            Self::Cs127 => 127u16,
            Self::Cs128 => 128u16,
            Self::Cs129 => 129u16,
            Self::Cs130 => 130u16,
            Self::Cs131 => 131u16,
            Self::Cs132 => 132u16,
            Self::Cs133 => 133u16,
            Self::Cs134 => 134u16,
            Self::Cs135 => 135u16,
            Self::Cs136 => 136u16,
            Self::Cs137 => 137u16,
            Self::Cs138 => 138u16,
            Self::Cs139 => 139u16,
            Self::Cs140 => 140u16,
            Self::Cs141 => 141u16,
            Self::Cs142 => 142u16,
            Self::Cs143 => 143u16,
            Self::Cs144 => 144u16,
            Self::Cs145 => 145u16,
            Self::Cs146 => 146u16,
            Self::Cs147 => 147u16,
            Self::Cs148 => 148u16,
            Self::Cs149 => 149u16,
            Self::Cs150 => 150u16,
            Self::Cs151 => 151u16,
        }
    }
}
impl super::IsotopicComposition for CaesiumIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Cs112 => None,
            Self::Cs113 => None,
            Self::Cs114 => None,
            Self::Cs115 => None,
            Self::Cs116 => None,
            Self::Cs117 => None,
            Self::Cs118 => None,
            Self::Cs119 => None,
            Self::Cs120 => None,
            Self::Cs121 => None,
            Self::Cs122 => None,
            Self::Cs123 => None,
            Self::Cs124 => None,
            Self::Cs125 => None,
            Self::Cs126 => None,
            Self::Cs127 => None,
            Self::Cs128 => None,
            Self::Cs129 => None,
            Self::Cs130 => None,
            Self::Cs131 => None,
            Self::Cs132 => None,
            Self::Cs133 => Some(1f64),
            Self::Cs134 => None,
            Self::Cs135 => None,
            Self::Cs136 => None,
            Self::Cs137 => None,
            Self::Cs138 => None,
            Self::Cs139 => None,
            Self::Cs140 => None,
            Self::Cs141 => None,
            Self::Cs142 => None,
            Self::Cs143 => None,
            Self::Cs144 => None,
            Self::Cs145 => None,
            Self::Cs146 => None,
            Self::Cs147 => None,
            Self::Cs148 => None,
            Self::Cs149 => None,
            Self::Cs150 => None,
            Self::Cs151 => None,
        }
    }
}
impl super::MostAbundantIsotope for CaesiumIsotope {
    fn most_abundant_isotope() -> Self {
        Self::Cs133
    }
}
impl std::fmt::Display for CaesiumIsotope {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Cs112 => write!(f, "Cs112"),
            Self::Cs113 => write!(f, "Cs113"),
            Self::Cs114 => write!(f, "Cs114"),
            Self::Cs115 => write!(f, "Cs115"),
            Self::Cs116 => write!(f, "Cs116"),
            Self::Cs117 => write!(f, "Cs117"),
            Self::Cs118 => write!(f, "Cs118"),
            Self::Cs119 => write!(f, "Cs119"),
            Self::Cs120 => write!(f, "Cs120"),
            Self::Cs121 => write!(f, "Cs121"),
            Self::Cs122 => write!(f, "Cs122"),
            Self::Cs123 => write!(f, "Cs123"),
            Self::Cs124 => write!(f, "Cs124"),
            Self::Cs125 => write!(f, "Cs125"),
            Self::Cs126 => write!(f, "Cs126"),
            Self::Cs127 => write!(f, "Cs127"),
            Self::Cs128 => write!(f, "Cs128"),
            Self::Cs129 => write!(f, "Cs129"),
            Self::Cs130 => write!(f, "Cs130"),
            Self::Cs131 => write!(f, "Cs131"),
            Self::Cs132 => write!(f, "Cs132"),
            Self::Cs133 => write!(f, "Cs133"),
            Self::Cs134 => write!(f, "Cs134"),
            Self::Cs135 => write!(f, "Cs135"),
            Self::Cs136 => write!(f, "Cs136"),
            Self::Cs137 => write!(f, "Cs137"),
            Self::Cs138 => write!(f, "Cs138"),
            Self::Cs139 => write!(f, "Cs139"),
            Self::Cs140 => write!(f, "Cs140"),
            Self::Cs141 => write!(f, "Cs141"),
            Self::Cs142 => write!(f, "Cs142"),
            Self::Cs143 => write!(f, "Cs143"),
            Self::Cs144 => write!(f, "Cs144"),
            Self::Cs145 => write!(f, "Cs145"),
            Self::Cs146 => write!(f, "Cs146"),
            Self::Cs147 => write!(f, "Cs147"),
            Self::Cs148 => write!(f, "Cs148"),
            Self::Cs149 => write!(f, "Cs149"),
            Self::Cs150 => write!(f, "Cs150"),
            Self::Cs151 => write!(f, "Cs151"),
        }
    }
}
