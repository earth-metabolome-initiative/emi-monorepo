#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum TinIsotope {
    Sn99,
    Sn100,
    Sn101,
    Sn102,
    Sn103,
    Sn104,
    Sn105,
    Sn106,
    Sn107,
    Sn108,
    Sn109,
    Sn110,
    Sn111,
    Sn112,
    Sn113,
    Sn114,
    Sn115,
    Sn116,
    Sn117,
    Sn118,
    Sn119,
    Sn120,
    Sn121,
    Sn122,
    Sn123,
    Sn124,
    Sn125,
    Sn126,
    Sn127,
    Sn128,
    Sn129,
    Sn130,
    Sn131,
    Sn132,
    Sn133,
    Sn134,
    Sn135,
    Sn136,
    Sn137,
    Sn138,
}
impl super::RelativeAtomicMass for TinIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Sn99 => 98.94853f64,
            Self::Sn100 => 99.9385f64,
            Self::Sn101 => 100.93526f64,
            Self::Sn102 => 101.93029f64,
            Self::Sn103 => 102.928105f64,
            Self::Sn104 => 103.9231052f64,
            Self::Sn105 => 104.9212684f64,
            Self::Sn106 => 105.9169574f64,
            Self::Sn107 => 106.9157137f64,
            Self::Sn108 => 107.9118943f64,
            Self::Sn109 => 108.9112921f64,
            Self::Sn110 => 109.907845f64,
            Self::Sn111 => 110.9077401f64,
            Self::Sn112 => 111.90482387f64,
            Self::Sn113 => 112.9051757f64,
            Self::Sn114 => 113.9027827f64,
            Self::Sn115 => 114.903344699f64,
            Self::Sn116 => 115.9017428f64,
            Self::Sn117 => 116.90295398f64,
            Self::Sn118 => 117.90160657f64,
            Self::Sn119 => 118.90331117f64,
            Self::Sn120 => 119.90220163f64,
            Self::Sn121 => 120.9042426f64,
            Self::Sn122 => 121.9034438f64,
            Self::Sn123 => 122.9057252f64,
            Self::Sn124 => 123.9052766f64,
            Self::Sn125 => 124.9077864f64,
            Self::Sn126 => 125.907659f64,
            Self::Sn127 => 126.91039f64,
            Self::Sn128 => 127.910507f64,
            Self::Sn129 => 128.913465f64,
            Self::Sn130 => 129.9139738f64,
            Self::Sn131 => 130.917045f64,
            Self::Sn132 => 131.9178267f64,
            Self::Sn133 => 132.9239134f64,
            Self::Sn134 => 133.9286821f64,
            Self::Sn135 => 134.9349086f64,
            Self::Sn136 => 135.93999f64,
            Self::Sn137 => 136.94655f64,
            Self::Sn138 => 137.95184f64,
        }
    }
}
impl super::ElementVariant for TinIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Sn
    }
}
impl super::MassNumber for TinIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Sn99 => 99u16,
            Self::Sn100 => 100u16,
            Self::Sn101 => 101u16,
            Self::Sn102 => 102u16,
            Self::Sn103 => 103u16,
            Self::Sn104 => 104u16,
            Self::Sn105 => 105u16,
            Self::Sn106 => 106u16,
            Self::Sn107 => 107u16,
            Self::Sn108 => 108u16,
            Self::Sn109 => 109u16,
            Self::Sn110 => 110u16,
            Self::Sn111 => 111u16,
            Self::Sn112 => 112u16,
            Self::Sn113 => 113u16,
            Self::Sn114 => 114u16,
            Self::Sn115 => 115u16,
            Self::Sn116 => 116u16,
            Self::Sn117 => 117u16,
            Self::Sn118 => 118u16,
            Self::Sn119 => 119u16,
            Self::Sn120 => 120u16,
            Self::Sn121 => 121u16,
            Self::Sn122 => 122u16,
            Self::Sn123 => 123u16,
            Self::Sn124 => 124u16,
            Self::Sn125 => 125u16,
            Self::Sn126 => 126u16,
            Self::Sn127 => 127u16,
            Self::Sn128 => 128u16,
            Self::Sn129 => 129u16,
            Self::Sn130 => 130u16,
            Self::Sn131 => 131u16,
            Self::Sn132 => 132u16,
            Self::Sn133 => 133u16,
            Self::Sn134 => 134u16,
            Self::Sn135 => 135u16,
            Self::Sn136 => 136u16,
            Self::Sn137 => 137u16,
            Self::Sn138 => 138u16,
        }
    }
}
impl super::IsotopicComposition for TinIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Sn99 => None,
            Self::Sn100 => None,
            Self::Sn101 => None,
            Self::Sn102 => None,
            Self::Sn103 => None,
            Self::Sn104 => None,
            Self::Sn105 => None,
            Self::Sn106 => None,
            Self::Sn107 => None,
            Self::Sn108 => None,
            Self::Sn109 => None,
            Self::Sn110 => None,
            Self::Sn111 => None,
            Self::Sn112 => Some(0.0097f64),
            Self::Sn113 => None,
            Self::Sn114 => Some(0.0066f64),
            Self::Sn115 => Some(0.0034f64),
            Self::Sn116 => Some(0.1454f64),
            Self::Sn117 => Some(0.0768f64),
            Self::Sn118 => Some(0.2422f64),
            Self::Sn119 => Some(0.0859f64),
            Self::Sn120 => Some(0.3258f64),
            Self::Sn121 => None,
            Self::Sn122 => Some(0.0463f64),
            Self::Sn123 => None,
            Self::Sn124 => Some(0.0579f64),
            Self::Sn125 => None,
            Self::Sn126 => None,
            Self::Sn127 => None,
            Self::Sn128 => None,
            Self::Sn129 => None,
            Self::Sn130 => None,
            Self::Sn131 => None,
            Self::Sn132 => None,
            Self::Sn133 => None,
            Self::Sn134 => None,
            Self::Sn135 => None,
            Self::Sn136 => None,
            Self::Sn137 => None,
            Self::Sn138 => None,
        }
    }
}
impl super::MostCommonIsotope for TinIsotope {
    fn most_common_isotope() -> Self {
        Self::Sn120
    }
}
