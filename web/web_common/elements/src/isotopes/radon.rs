#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum RadonIsotope {
    Rn193,
    Rn194,
    Rn195,
    Rn196,
    Rn197,
    Rn198,
    Rn199,
    Rn200,
    Rn201,
    Rn202,
    Rn203,
    Rn204,
    Rn205,
    Rn206,
    Rn207,
    Rn208,
    Rn209,
    Rn210,
    Rn211,
    Rn212,
    Rn213,
    Rn214,
    Rn215,
    Rn216,
    Rn217,
    Rn218,
    Rn219,
    Rn220,
    Rn221,
    Rn222,
    Rn223,
    Rn224,
    Rn225,
    Rn226,
    Rn227,
    Rn228,
    Rn229,
    Rn230,
    Rn231,
}
impl super::RelativeAtomicMass for RadonIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Rn193 => 193.009708f64,
            Self::Rn194 => 194.006144f64,
            Self::Rn195 => 195.005422f64,
            Self::Rn196 => 196.002116f64,
            Self::Rn197 => 197.001585f64,
            Self::Rn198 => 197.998679f64,
            Self::Rn199 => 198.99839f64,
            Self::Rn200 => 199.99569f64,
            Self::Rn201 => 200.995628f64,
            Self::Rn202 => 201.993264f64,
            Self::Rn203 => 202.993388f64,
            Self::Rn204 => 203.99143f64,
            Self::Rn205 => 204.991719f64,
            Self::Rn206 => 205.990214f64,
            Self::Rn207 => 206.9907303f64,
            Self::Rn208 => 207.989635f64,
            Self::Rn209 => 208.990415f64,
            Self::Rn210 => 209.9896891f64,
            Self::Rn211 => 210.9906011f64,
            Self::Rn212 => 211.9907039f64,
            Self::Rn213 => 212.9938831f64,
            Self::Rn214 => 213.995363f64,
            Self::Rn215 => 214.9987459f64,
            Self::Rn216 => 216.0002719f64,
            Self::Rn217 => 217.003928f64,
            Self::Rn218 => 218.0056016f64,
            Self::Rn219 => 219.0094804f64,
            Self::Rn220 => 220.0113941f64,
            Self::Rn221 => 221.0155371f64,
            Self::Rn222 => 222.0175782f64,
            Self::Rn223 => 223.0218893f64,
            Self::Rn224 => 224.024096f64,
            Self::Rn225 => 225.028486f64,
            Self::Rn226 => 226.030861f64,
            Self::Rn227 => 227.035304f64,
            Self::Rn228 => 228.037835f64,
            Self::Rn229 => 229.042257f64,
            Self::Rn230 => 230.04514f64,
            Self::Rn231 => 231.04987f64,
        }
    }
}
impl super::ElementVariant for RadonIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Rn
    }
}
impl super::MassNumber for RadonIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Rn193 => 193u16,
            Self::Rn194 => 194u16,
            Self::Rn195 => 195u16,
            Self::Rn196 => 196u16,
            Self::Rn197 => 197u16,
            Self::Rn198 => 198u16,
            Self::Rn199 => 199u16,
            Self::Rn200 => 200u16,
            Self::Rn201 => 201u16,
            Self::Rn202 => 202u16,
            Self::Rn203 => 203u16,
            Self::Rn204 => 204u16,
            Self::Rn205 => 205u16,
            Self::Rn206 => 206u16,
            Self::Rn207 => 207u16,
            Self::Rn208 => 208u16,
            Self::Rn209 => 209u16,
            Self::Rn210 => 210u16,
            Self::Rn211 => 211u16,
            Self::Rn212 => 212u16,
            Self::Rn213 => 213u16,
            Self::Rn214 => 214u16,
            Self::Rn215 => 215u16,
            Self::Rn216 => 216u16,
            Self::Rn217 => 217u16,
            Self::Rn218 => 218u16,
            Self::Rn219 => 219u16,
            Self::Rn220 => 220u16,
            Self::Rn221 => 221u16,
            Self::Rn222 => 222u16,
            Self::Rn223 => 223u16,
            Self::Rn224 => 224u16,
            Self::Rn225 => 225u16,
            Self::Rn226 => 226u16,
            Self::Rn227 => 227u16,
            Self::Rn228 => 228u16,
            Self::Rn229 => 229u16,
            Self::Rn230 => 230u16,
            Self::Rn231 => 231u16,
        }
    }
}
impl super::IsotopicComposition for RadonIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Rn193 => None,
            Self::Rn194 => None,
            Self::Rn195 => None,
            Self::Rn196 => None,
            Self::Rn197 => None,
            Self::Rn198 => None,
            Self::Rn199 => None,
            Self::Rn200 => None,
            Self::Rn201 => None,
            Self::Rn202 => None,
            Self::Rn203 => None,
            Self::Rn204 => None,
            Self::Rn205 => None,
            Self::Rn206 => None,
            Self::Rn207 => None,
            Self::Rn208 => None,
            Self::Rn209 => None,
            Self::Rn210 => None,
            Self::Rn211 => None,
            Self::Rn212 => None,
            Self::Rn213 => None,
            Self::Rn214 => None,
            Self::Rn215 => None,
            Self::Rn216 => None,
            Self::Rn217 => None,
            Self::Rn218 => None,
            Self::Rn219 => None,
            Self::Rn220 => None,
            Self::Rn221 => None,
            Self::Rn222 => None,
            Self::Rn223 => None,
            Self::Rn224 => None,
            Self::Rn225 => None,
            Self::Rn226 => None,
            Self::Rn227 => None,
            Self::Rn228 => None,
            Self::Rn229 => None,
            Self::Rn230 => None,
            Self::Rn231 => None,
        }
    }
}
impl super::MostCommonIsotope for RadonIsotope {
    fn most_common_isotope() -> Self {
        Self::Rn231
    }
}
