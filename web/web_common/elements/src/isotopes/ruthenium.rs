#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, strum :: EnumIter)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "pgrx", derive(pgrx::PostgresEnum))]
pub enum RutheniumIsotope {
    Ru87,
    Ru88,
    Ru89,
    Ru90,
    Ru91,
    Ru92,
    Ru93,
    Ru94,
    Ru95,
    Ru96,
    Ru97,
    Ru98,
    Ru99,
    Ru100,
    Ru101,
    Ru102,
    Ru103,
    Ru104,
    Ru105,
    Ru106,
    Ru107,
    Ru108,
    Ru109,
    Ru110,
    Ru111,
    Ru112,
    Ru113,
    Ru114,
    Ru115,
    Ru116,
    Ru117,
    Ru118,
    Ru119,
    Ru120,
    Ru121,
    Ru122,
    Ru123,
    Ru124,
}
impl super::RelativeAtomicMass for RutheniumIsotope {
    fn relative_atomic_mass(&self) -> f64 {
        match self {
            Self::Ru87 => 86.95069f64,
            Self::Ru88 => 87.9416f64,
            Self::Ru89 => 88.93762f64,
            Self::Ru90 => 89.9303444f64,
            Self::Ru91 => 90.9267419f64,
            Self::Ru92 => 91.9202344f64,
            Self::Ru93 => 92.9171044f64,
            Self::Ru94 => 93.9113429f64,
            Self::Ru95 => 94.910406f64,
            Self::Ru96 => 95.90759025f64,
            Self::Ru97 => 96.9075471f64,
            Self::Ru98 => 97.9052868f64,
            Self::Ru99 => 98.9059341f64,
            Self::Ru100 => 99.9042143f64,
            Self::Ru101 => 100.9055769f64,
            Self::Ru102 => 101.9043441f64,
            Self::Ru103 => 102.9063186f64,
            Self::Ru104 => 103.9054275f64,
            Self::Ru105 => 104.9077476f64,
            Self::Ru106 => 105.9073291f64,
            Self::Ru107 => 106.909972f64,
            Self::Ru108 => 107.910188f64,
            Self::Ru109 => 108.913326f64,
            Self::Ru110 => 109.9140407f64,
            Self::Ru111 => 110.91757f64,
            Self::Ru112 => 111.918809f64,
            Self::Ru113 => 112.922844f64,
            Self::Ru114 => 113.9246136f64,
            Self::Ru115 => 114.92882f64,
            Self::Ru116 => 115.9312192f64,
            Self::Ru117 => 116.9361f64,
            Self::Ru118 => 117.93853f64,
            Self::Ru119 => 118.94357f64,
            Self::Ru120 => 119.94631f64,
            Self::Ru121 => 120.95164f64,
            Self::Ru122 => 121.95447f64,
            Self::Ru123 => 122.95989f64,
            Self::Ru124 => 123.96305f64,
        }
    }
}
impl super::ElementVariant for RutheniumIsotope {
    fn element(&self) -> crate::Element {
        crate::Element::Ru
    }
}
impl super::MassNumber for RutheniumIsotope {
    fn mass_number(&self) -> u16 {
        match self {
            Self::Ru87 => 87u16,
            Self::Ru88 => 88u16,
            Self::Ru89 => 89u16,
            Self::Ru90 => 90u16,
            Self::Ru91 => 91u16,
            Self::Ru92 => 92u16,
            Self::Ru93 => 93u16,
            Self::Ru94 => 94u16,
            Self::Ru95 => 95u16,
            Self::Ru96 => 96u16,
            Self::Ru97 => 97u16,
            Self::Ru98 => 98u16,
            Self::Ru99 => 99u16,
            Self::Ru100 => 100u16,
            Self::Ru101 => 101u16,
            Self::Ru102 => 102u16,
            Self::Ru103 => 103u16,
            Self::Ru104 => 104u16,
            Self::Ru105 => 105u16,
            Self::Ru106 => 106u16,
            Self::Ru107 => 107u16,
            Self::Ru108 => 108u16,
            Self::Ru109 => 109u16,
            Self::Ru110 => 110u16,
            Self::Ru111 => 111u16,
            Self::Ru112 => 112u16,
            Self::Ru113 => 113u16,
            Self::Ru114 => 114u16,
            Self::Ru115 => 115u16,
            Self::Ru116 => 116u16,
            Self::Ru117 => 117u16,
            Self::Ru118 => 118u16,
            Self::Ru119 => 119u16,
            Self::Ru120 => 120u16,
            Self::Ru121 => 121u16,
            Self::Ru122 => 122u16,
            Self::Ru123 => 123u16,
            Self::Ru124 => 124u16,
        }
    }
}
impl super::IsotopicComposition for RutheniumIsotope {
    fn isotopic_composition(&self) -> Option<f64> {
        match self {
            Self::Ru87 => None,
            Self::Ru88 => None,
            Self::Ru89 => None,
            Self::Ru90 => None,
            Self::Ru91 => None,
            Self::Ru92 => None,
            Self::Ru93 => None,
            Self::Ru94 => None,
            Self::Ru95 => None,
            Self::Ru96 => Some(0.0554f64),
            Self::Ru97 => None,
            Self::Ru98 => Some(0.0187f64),
            Self::Ru99 => Some(0.1276f64),
            Self::Ru100 => Some(0.126f64),
            Self::Ru101 => Some(0.1706f64),
            Self::Ru102 => Some(0.3155f64),
            Self::Ru103 => None,
            Self::Ru104 => Some(0.1862f64),
            Self::Ru105 => None,
            Self::Ru106 => None,
            Self::Ru107 => None,
            Self::Ru108 => None,
            Self::Ru109 => None,
            Self::Ru110 => None,
            Self::Ru111 => None,
            Self::Ru112 => None,
            Self::Ru113 => None,
            Self::Ru114 => None,
            Self::Ru115 => None,
            Self::Ru116 => None,
            Self::Ru117 => None,
            Self::Ru118 => None,
            Self::Ru119 => None,
            Self::Ru120 => None,
            Self::Ru121 => None,
            Self::Ru122 => None,
            Self::Ru123 => None,
            Self::Ru124 => None,
        }
    }
}
impl super::MostAbundantIsotope for RutheniumIsotope {
    fn most_abundant_isotope() -> Self {
        Self::Ru102
    }
}
impl std::fmt::Display for RutheniumIsotope {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Ru87 => write!(f, "Ru87"),
            Self::Ru88 => write!(f, "Ru88"),
            Self::Ru89 => write!(f, "Ru89"),
            Self::Ru90 => write!(f, "Ru90"),
            Self::Ru91 => write!(f, "Ru91"),
            Self::Ru92 => write!(f, "Ru92"),
            Self::Ru93 => write!(f, "Ru93"),
            Self::Ru94 => write!(f, "Ru94"),
            Self::Ru95 => write!(f, "Ru95"),
            Self::Ru96 => write!(f, "Ru96"),
            Self::Ru97 => write!(f, "Ru97"),
            Self::Ru98 => write!(f, "Ru98"),
            Self::Ru99 => write!(f, "Ru99"),
            Self::Ru100 => write!(f, "Ru100"),
            Self::Ru101 => write!(f, "Ru101"),
            Self::Ru102 => write!(f, "Ru102"),
            Self::Ru103 => write!(f, "Ru103"),
            Self::Ru104 => write!(f, "Ru104"),
            Self::Ru105 => write!(f, "Ru105"),
            Self::Ru106 => write!(f, "Ru106"),
            Self::Ru107 => write!(f, "Ru107"),
            Self::Ru108 => write!(f, "Ru108"),
            Self::Ru109 => write!(f, "Ru109"),
            Self::Ru110 => write!(f, "Ru110"),
            Self::Ru111 => write!(f, "Ru111"),
            Self::Ru112 => write!(f, "Ru112"),
            Self::Ru113 => write!(f, "Ru113"),
            Self::Ru114 => write!(f, "Ru114"),
            Self::Ru115 => write!(f, "Ru115"),
            Self::Ru116 => write!(f, "Ru116"),
            Self::Ru117 => write!(f, "Ru117"),
            Self::Ru118 => write!(f, "Ru118"),
            Self::Ru119 => write!(f, "Ru119"),
            Self::Ru120 => write!(f, "Ru120"),
            Self::Ru121 => write!(f, "Ru121"),
            Self::Ru122 => write!(f, "Ru122"),
            Self::Ru123 => write!(f, "Ru123"),
            Self::Ru124 => write!(f, "Ru124"),
        }
    }
}
